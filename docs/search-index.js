var searchIndex = JSON.parse('{\
"geo_quadkey_rs":{"doc":"","t":"DLLLLLLLLLLLLLLLLLLL","n":["Quadkey","borrow","borrow_mut","clip","coordinates_to_pixel","decode","encode","from","ground_resolution","into","map_size","neighbors","pixel_to_coordinates","pixel_to_tile","quadkey_to_tile","tile_to_pixel","tile_to_quadkey","try_from","try_into","type_id"],"q":[[0,"geo_quadkey_rs"]],"d":["","","","Clip a value between a minimum and maximum value","Convert coordinates to pixel values","Decode a quadkey to coordinates","Encode coordinates to a quadkey","Returns the argument unchanged.","Calculate the ground resolution based on the latitude and â€¦","Calls <code>U::from(self)</code>.","Calculate the map size based on the precision","Find neighbors of a quadkey","Convert pixel values to coordinates","Convert pixel values to tile values","Convert a quadkey to tile values","Convert tile values to pixel values","Convert tile values to a quadkey","","",""],"i":[0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],"f":[0,[[]],[[]],[[1,1,1],1],[[1,1,2]],[3],[[1,1,2],4],[[]],[[1,2],1],[[]],[2,1],[3,[[5,[4]]]],[[6,6,2]],[[6,6]],[3],[[6,6]],[[6,6,2],4],[[],7],[[],7],[[],8]],"c":[],"p":[[15,"f64"],[15,"usize"],[15,"str"],[3,"String"],[3,"Vec"],[15,"i32"],[4,"Result"],[3,"TypeId"],[3,"Quadkey"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
